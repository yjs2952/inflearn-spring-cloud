server:
  port: 8000
eureka:
  instance:
    hostname: ${spring.cloud.client.ip-address}
#    ip-address: ${spring.cloud.client.ip-address}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      default-zone: http://localhost:8761/eureka
spring:
  application:
    name: apigateway-service
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
      routes:
#        - id: user-service
        #          uri: lb://USER-SERVICE
        #          predicates: # 조건절이라 생각하면 된다.
        #            - Path=/user-service/**  # 이 요청이 들어오면 무조건 (uri: http://localhost:8082/) 로 보내겠다.
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET, POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie  # 매번 새로운 데이터처럼 인식하기 위해 요청 헤더를 삭제한다. (같은 페이지를 여러번 요청해도 Cookie 정보가 response 에 남지 않는다. XSS 공격을 예방할 수 있다.)
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates: # 조건절이라 생각하면 된다.
            - Path=/order-service/**  # 이 요청이 들어오면 무조건 (uri: http://localhost:8082/) 로 보내겠다.
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/actuator/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates: # 조건절이라 생각하면 된다.
            - Path=/catalog-service/**  # 이 요청이 들어오면 무조건 (uri: http://localhost:8082/) 로 보내겠다.
#        - id: first-service
#          uri: lb://MY-FIRST-SERVICE
#          predicates: # 조건절이라 생각하면 된다.
#            - Path=/first-service/**  # 이 요청이 들어오면 무조건 (uri: http://localhost:8081/) 로 보내겠다.
#          filters:
#            - CustomFilter
#        - id: second-service
#          uri: lb://MY-SECOND-SERVICE
#          predicates: # 조건절이라 생각하면 된다.
#            - Path=/second-service/**  # 이 요청이 들어오면 무조건 (uri: http://localhost:8082/) 로 보내겠다.
#          filters:
#            - name: CustomFilter
#            - name: LoggingFilter
#              args:
#                baseMessage: Hi, there.
#                preLogger: true
#                postLogger: true

#token:
#  secret: user_token

management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httptrace, busrefresh, info, metrics, prometheus
# 비동기식으로 netty가 실행된다.